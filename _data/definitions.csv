Hierarchy;Hierarchy Description;Need Name;Definition;Value;Indicators
Basic Needs;Ability to build and application and deploy changes to it;People & Purpose;Enough team members to meet the ownership and delivery expectations on them.;The project's vision and objectives are clearly communicated, creating a sense of shared purpose, motivation and cohesion among team members and leadership;I feel connected to the purpose and goals of the project I am working on.
;;Technical capability;The team’s technical capabilities align well with the requirements of the project. Team members can complete daily activities confidently.;They have a solid understanding of the technologies, frameworks and tools that are utilised, allowing them to design and develop robust solutions efficiently.;Most people can pick up most work on the team. They regularly pair-program to help with productivity and building experience.
;;Environment Management;Ability to test and debug changes in a <b>prod-like environment</b>, infrastructure-as-code, data sets/data generation, dependency management and configuration, mocks, data generation, short-lived environments.;Real dependencies, similar/same technically to production. Composable environments. Setting up and managing different environment for my project is efficient and cheap.;An environment for every change change.
;;Work Backlog;With a well-maintained backlog, the project team can effectively plan, estimate, and track progress, ensuring a steady flow of value delivery.;Prioritization reflects a balance of business, value, customer value, team productivity and service performance.;The work backlog for my project is well-organized and prioritized. The backlog items are appropriately sized, ensuring efficient planning and task allocation.
;;Data & Storage;Familiar, fit-for-purpose data storage solutions are available to suit the organisation's obligations.;Opinionated self-service data solutions are available for the teams across SQL, NoSQL, Blob/Bucket and Caching. Guidance and defaults are in place for performance, reliability, and data durability. The mean-time-to-restore is known for its primary services. Sharding or partitioning policies support the scale and regional context of the services.;The team can independently manage Data migrations and schema changes. There is up-to-date documentation of schemas and associated privacy or security classifications.
;;Version Control;The consistent creation and maintenance of repositories, teams, projects and permissions for code repositories.;"Clear guidance on branching strategies implemented at the organisation level. It is easy to track changes and support concurrent development and rollback changes.
Clear association between repository, team and any deployed assets and overall project status.";"There is guidance and examples on creation of repositories for internal only, internal + trusted partners, and open source use cases. 
The removal of permissions for ex employees and contractors is automated"
;;Production Environments;Trusted combined state of configuration, deployed artifact(s), infrastructure, runtimes, dependencies and access control.;Production Environment ensures a seamless user experience and customer satisfaction by providing a reliable software deployment platform.;"Optimised and managed for high performance, scalability  and availability.
The team can quickly access production log files and data to assist with troubleshooting issues."
;;Observability;Ability to debug, troubleshoot and <b>monitor normal and abnormal</b> system behaviour. Curated patterns and tooling for the collection, storage, querying and aggregation of system data;It provides comprehensive visibility into the system’s health, performance, and logs, allowing for timely detection and resolution of issues.;An opinionated operational health dashboard
;;Operating Rhythms;The routines used by the team to manage delivery and operations. Planning on a daily, weekly and quarterly basis. <b>Open communication</b> for timely updates, issue resolution, and knowledge sharing.;Foster a shared understanding of priorities and facilitate the coordination of tasks. Achievements are celebrated, learnings are sought, and the team is empowered to balance capacity investment across new feature delivery, quality of service and productivity.;Familiar and effective ceremonies. There is Clear visibility on past and planned investments across new feature delivery, maintaining quality of service and improving productivity.
;;Permissions & Identity;The ability to create and manage accounts, credentials, roles and permissions for end users of the product or service the team is responsible for.;Support for social logins, single sign-on, account verification and suspension. Multi-factor authentication flows.;The ability to script user generation or resets to help with integration test automation.
;;Local Dev + IDE;"Highly automated opinionated setup process gives developers a consistent baseline setup to support build, test and run activities for the primary services they work on.
Service-specific local setup (e.g. install dependencies, mocks, test data). Related to environment management.";Provides a smooth and productive coding experience, with the necessary tools, libraries, frameworks  and associated licenses are readily available.;IDE is setup consistent for new team members. Agreed coding conventions are codified in  'dot files' at machine or repository level.
;;Compute;The allocated computational resources sufficiently meet the demands of my project, ensuring optimal performance and scalability without hindering productivity.;"Self-service compute solutions available for the teams across VMs, containers, FaaS and edge workloads with opinionated sensible defaults. Clear options to support minimum capacity, elastic scaling, burst scaling and serverless.
Guidance and defaults in place for performance, reliability and availability of compute platforms.";"Compute fleets are kept young and disposable through routine fleet management. Running instances, configured containers younger than two weeks to improve patching compliance and avoid stateful dependency.
Proactive management of minimum OS and runtime versions to avoid running non supported versions or dependencies in production."
;;Cloud Accounts & IO;Creation of new cloud accounts or resource groups in which to deploy and manage new or existing infrastructure.;Fast automated creation and deletion of cloud accounts with consistent and compliant Identity and Access Management inherited from a centralised control pane. Accounts created with consistent virtual networks for deployed assets and across accounts.;Teams can create new cloud accounts to provision infrastructure and services related to a common business domain.
;;Gateways & Web Delivery;"These gateways provide a unified entry point, handle routing and load balancing, and ensure secure and optimized data transmission. 
Examples: API GW, Azure API Management, Cloudflare, Fastly, Akamai, Cloudfront, Kong, NGINX";With robust web delivery mechanisms, the project team can achieve high availability, scalability, and fault tolerance, delivering a seamless user experience and enabling effective integration with external systems.;The api gateways and web delivery mechanisms (e.g. CDNs) employed in my project ensure efficient and reliable communication between various services for internal and external traffic.
Managed Work;Ability to manage throughput and quality of changes. Repeatable work, highly automated daily routines;Information Management;The team maintains a consistent repository of information on component ownership, support routines, team composition and solution architecture.;The information is accessible across the organization to support efficient onboarding, communication and incident management across teams.;All deployed infrastructure is identifiable to the component and associated team level.
;;Standards Compliance;The combined organisation obligations (e.g. audit, regulations) and agreed best practices are documented, transparent and respected by teams.;There is a process to propose and accept changes to established standards.;The level of compliance with standards is visible across the organisation.
;;On-call;The on-call process is well-structured and familiar to all team members.;Escalation paths are known and used. Expectations with responders are clear and respected for out-of-hours and holiday periods. Handovers are acknowledged and include a debrief on any closed or ongoing incidents.;The appropriate people are available and contacted promptly to respond to alerts or incidents.
;;Quality Engineering;The tools and practices teams use to validate changes early and throughout the development lifecycle continuously.;The management of quality ensures controls are trusted and highly automated. It is familiar and routine to maintain unit, contract and integration testing.;Core workflows for each service are continually tested in production.
;;Security Controls;Tests and security controls in place throughout the development lifecycle (design, build and run) to help identify potential security issues.;The team understands their security posture and manages new issues in consultation with experts or a supporting team.;The security review process does not slow down the development process for the primary systems the team works on.
;;Alerting;Intelligent alerting mechanism that monitors key metrics in agreed thresholds across request rates, errors and latency.;Scheduled tests regularly check the primary service flows or user actions for availability. When detecting abnormal system behaviour, the team is alerted before the customer or stakeholder reports an issue.;Customer-raised instead of team-raised are the exception, not the norm.
;;Deployment Solutions;For each component type the team supports, there is a standard workflow to build, test, publish artefacts and deploy new versions. Central teams publish and maintain common build steps inherited across all builds (e.g., publishing, tagging, static analysis).;Build pipelines are highly automated, including promoting successful builds across environments. The deployment solution also orchestrates supporting automation for infrastructure-as-code (IaC), configuration and secrets management.;Build capacity and speed is high enough to keep wait times under [10] minutes.
;;Artifact Management;A standard solution for hosting, managing and distributing binaries and artefacts across the organization. Artefacts include versioned binaries, library feeds (e.g. npm, NuGet, Maven), container images and non-sensitive configuration files.;The solution supports high availability and durability. The team publishes logs and test artefacts according to their audit requirements.;
;;Infrastructure as Code;Infrastructure configurations are defined in code, enabling version control, reproducibility, and automated provisioning.;The team manages workload infrastructure creation, configuration, maintenance and deletion through source code change control.;Cloud or data centre portals are used for diagnostics and learning but not for applying changes.
;;Delivery Metrics;Establishing and using key metrics for the throughput and quality of changes, quality of service to customers and overall flow of work through teams.;These metrics provide insights into delivery efficiency, predictability, and capacity to deliver value.;We routinely identify bottlenecks and make data-driven decisions to improve delivery and operational performance.
Effective Ownership;Ability to effectively start, own and operate services already in production, regardless of new development work.;Templates & Golden Paths;A comprehensive set of templates and accelerators that expedite development and ensure consistent implementation of best practices across our common component types.;Component / Project templates implement blueprints in preferred architectures, coding conventions and engineering standards.;Accelerators combine templates into workflows to scaffold, build, test and deploy new services in hours.
;;Continuous Integration;All code changes are continually merged/ integrated to the main branch (trunk/master) several times a day. Test-driven development (TDD) and behavior-driven development (BDD) practices are diligently followed by all team members.;Significant reduction of work in progress through encouragement of smaller batch sizes. TDD ensures that tests are written before the code, promoting a thorough understanding of requirements and facilitating comprehensive test coverage. BDD focuses on defining system behavior through scenarios and specifications, improving collaboration between stakeholders and developers.;The team may also practice Trunk-based development (TBD) or non-blocking pull requests where Engineers work on a single branch as much as possible to encourage continuous integration. Pushing changes directly to trunk or main is made safe with mature TDD and quality engineering practices.
;;Compliance as Code;Compliance rules and checks are codified, allowing for automated enforcement during the development and deployment process.;By treating compliance as code, the team can efficiently implement and maintain compliance controls, reducing human error, enhancing auditability, and minimizing the time and effort required to maintain regulatory compliance.;Audit-related requests for information are straightforward, and largely self-serve.  My team incorporates compliance requirements as code, automating compliance checks and ensuring adherence to regulatory standards.
;;Incident Mgmt;The team follows established incident response procedures, including incident identification, communication, prioritization, and resolution.;Clear roles and responsibilities are defined, ensuring effective coordination and collaboration during incident handling.;The incident management process on my product is robust and well-structured, enabling swift response and minimizing the impact of incidents.
;;Service Level Indicators;Quality of service to customers, users and other systems is monitored through service level indicators (SLIs) and managed through clear service level objectives (SLOs).;SLIs measure performance, ensuring the product consistently meets the defined quality and reliability standards. These SLIs define synthetic tests of primary workflows and key metrics, such as response time, availability, and error rates, enabling the team to monitor and continuously improve the product's performance against established benchmarks and commitments made to customers.;The team is aware of a baseline level of performance for their key services over the past 3-6 months.
;;APIs & SDKs;The team provides well-designed APIs and software development kits (SDKs) that facilitate integration and extensibility.;The APIs offer clear documentation, well-defined contracts, and consistent interfaces, enabling seamless interaction with the product's services and functionalities. The SDKs provide comprehensive tooling, libraries, and code examples, simplifying the development process for external and internal consumers.;Internal publishers support fake or mock implementations of their APIs to help consuming teams automate testing.
;;Eventing;The ability to coordinate functionality across distributed systems and services using events.;Customer solutions  and analytics can be implemented as composable, extendable and highly decoupled implementations. Reduces need for cross-team coordination and encourages incremental delivery of broad system capabilities.;Standard patterns, SDKs and tooling to publish, store, subscribe and consume events across APIs, workers, Web and mobile clients. Schema validation is in place to block foreign or malformed events.
;;Static Analysis;The team integrates static analysis tools that effectively identify code issues, potential vulnerabilities, and maintain code quality standards.;These tools automatically analyze code, check for common programming errors, and enforce coding conventions. Data on software composition & supply chain is available centrally to manage licensing and security vulnerability risk;Tools run locally and as part of automated builds to detect and resolve new issues as early as possible.
Sustainability;Moving the team's daily focus away from delivery toil towards customer challenges—the ability to grow and mature yearly.;Continuous Deployment;"Formally decoupling deployment from (Customer) release activity. 
Building on continuous Integration, all successfully builds are automatically promoted and deployed to production.  Changes are implemented with the intention it will be deployed directly to production. Deployments happen one or more times a day.";"Maximum throughput of changes while verifiably maintaining quality of changes. 
The team is likely practicing Trunk-based development (TBD) or non-blocking pull requests where Engineers work on a single branch as much as possible to encourage continuous integration. Pushing changes directly to trunk or main is made safe with mature TDD and quality engineering practices.";High degree of release controls (e.g. feature flags, experiments) ensure it's safe to deploy partially implemented features. High maturity of SLO and alerting to detect and revert problem changes.
;;Product Metrics;The team effectively captures and analyzes product performance metrics, enabling data-driven decision-making and continuous product improvement.;The team can independently form and test a new hypothesis using standard user event capture, aggregation and visualization tools.;User events and flows are well-documented and accessible to all teams. Event processing filters activity from automated testing.
;;Quality of Service;Proactively managing a commitment of quality of service to customers or interdependant teams.;Clear service level objectives (SLOs)  are proactively managed on a monthly basis.;Reliability improvements and targets are routinely discussed regardless of the level of production incidents.
;;Experimentation;Team actively promotes a culture of experimentation to support both hypothesis-driven development and technical risk management.;The team conducts controlled experiments, A/B tests, and user research to validate assumptions, gather feedback, and inform decision-making.;The team can run multiple experiments in parallel. Significant system changes can be safely tested in production.
;;Career Growth;The team and company encourage continuous learning, supports skill enhancement, and provides access to training resources and mentorship programs.;Everyday pairing and coaching on specialised areas avoid key person dependencies. Regular performance evaluations and constructive feedback help identify areas for improvement and define career paths.;There is a mix of junior and senior talent on the team. My team provides ample opportunities for career growth and professional development.
Flow;Ability to work productively over long periods while maintaining, if not increasing, customer trust.;Value & Trust, Mastery;Fostering a culture of delivering value and building trust, the team prioritizes customer needs and consistently delivers reliable outcomes.;Simultaneously, they strive for mastery through continuous learning and professional development, ensuring expertise in their respective fields. This combination drives innovation, collaboration, and excellence, exceeding customer expectations and maintaining a competitive edge.;
;;Governance & DR;The team enjoys adequate governance controls and disaster recovery (DR) measures for their services and operations.;Wherever possible, these controls are automated into the Engineering activities. The team proactively tests their DR procedures (e.g., backup, recovery, replication and failover) to meet their business continuity commitments.;"Annual audits do not interrupt the team's regular work. Recovery Time Objectives (RTOs) are validated. 
Teams understand the Cost to Serve for their primary components."
;;Hypothesis Driven;The team formulates clear hypotheses, defines success criteria, and designs experiments to gather data and insights.;By continuously testing and refining ideas, the team can make informed decisions, prioritize initiatives, and drive innovation, creating more customer value.;My product embraces a hypothesis-driven approach, where experiments and data analysis systematically test and validate assumptions.
;;Chaos / Game Days;By regularly subjecting the product to controlled chaos, the team can strengthen the system's robustness, improve incident response capabilities, and enhance overall system reliability.;During chaos/game days, the team simulates real-world failure scenarios, such as service outages or network disruptions, to identify vulnerabilities, assess the system's response, and fine-tune incident response processes.;My product team regularly conducts chaos/game days to proactively test and validate the system's resilience and readiness for unexpected scenarios.
